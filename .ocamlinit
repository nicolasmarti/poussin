
if let v = String.sub Sys.ocaml_version 0 4 in v >= "3.10"
then (Topdirs.dir_directory "+camlp5";
      Topdirs.dir_load Format.std_formatter "camlp5o.cma")
else (Topdirs.dir_load Format.std_formatter "camlp4o.cma");;

#directory "src/lib/";;
#load_rec "str.cma";;
#mod_use "extlist.ml";;
#mod_use "libpprinter.ml";;
#mod_use "libparser.ml";;
#mod_use "fm.ml";;

#directory "src/kernel/";;
#mod_use "calculus_def.ml";;
#mod_use "calculus_misc.ml";;
#mod_use "calculus_substitution.ml";;
#mod_use "calculus_engine.ml";;
#mod_use "calculus_pprinter.ml";;
#mod_use "calculus_kernel.ml";;

#directory "apps/";;
#mod_use "de.ml";;
#mod_use "pprinter.ml";;
#mod_use "parser.ml";;
#mod_use "interp.ml";;

open Calculus_kernel;;
open Pprinter;;
open Parser;;
open Printf;;
open Interp;;
open Format;;

let term_printer = fun f t -> 
  pp_open_box f 0; 
  pp_print_string f (term2string (ref empty_context) t);
  pp_close_box f ();
  pp_print_string f " : ";
  pp_open_box f 0; 
  pp_print_string f (term2string (ref empty_context) (get_type t));
  pp_close_box f ();;

#install_printer term_printer;;

let formula_printer = fun f (fm: Kernel.formula) -> 
  pp_open_box f 0; 
  pp_print_string f (term2string (ref (formula_context fm)) (formula_concl fm));
  (*
  pp_print_string f " : ";
  pp_print_string f (term2string (ref (formula_context fm)) (get_type (formula_prop fm)));
  *)
  pp_close_box f ();;

#install_printer formula_printer;;


let theorem_printer = fun f (t: Kernel.theorem) -> 
  pp_open_box f 0; 
    pp_open_box f 0; 
    (* here we should have the hypothesis *)
    pp_close_box f ();
    pp_print_string f "|-";
    pp_open_box f 0; 
      pp_print_string f (term2string (ref (theorem_context t)) (theorem_concl t));
      (*
      pp_print_string f " : ";
      pp_print_string f (term2string (ref (theorem_context t)) (get_type (theorem_prop t)));
      *)
    pp_close_box f ();
  pp_close_box f ();;

#install_printer theorem_printer;;

#use "quoteexpander.ml";;

#directory "stdlib/";;
#use "eq.ml";;

